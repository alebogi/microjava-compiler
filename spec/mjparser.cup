
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, IDENT, LBRACE, RBRRACE, CONST, EQUAL, SEMI, COMMA, CLASS, EXTENDS, VOID;

terminal Integer NUM_CONST ;
terminal String IDENT ;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;

nonterminal Program, DeclsList, MethodDeclList, Decls, ConstDecl, VarDecl, ClassDecl, Consts, ConstList, ConstListEnd, Arr, VarDeclList, VarDeclListEnd;
nonterminal ExtendsClass, ListOfVarDecl, Methods, MethodType, FormParsExists, ListOfStmt, FormPars, Statement;
nonterminal FormParsList, FormParsListEnd;

Program ::= (Program) PROG IDENT:progName DeclsList LBRACE MethodDeclList RBRACE
;

DeclsList ::= (DeclarationsList) DeclsList Decls
			|			
			(NoDeclarationsList) /* epsilon */
			;

Decls ::= (DeclsConst) ConstDecl 
		|
		(DeclsVar) VarDecl
		|
		(DeclsClass) ClassDecl
		;
		

ConstDecl ::= (ConstDeclaration) CONST Type:constType IDENT:constName EQUAL Consts ConstList SEMI
;

ConstList ::= (ConstantsList) ConstList ConstListEnd
			|
			(NoConstantsList) /* epsilon */
;

ConstListEnd ::= (ConstantsListEnd) COMMA IDENT:constEndName EQUAL Consts
;

Consts ::= (NumConst) NUM_CONST:numValue
			|
			(CharConst) CHAR_CONST:charValue
			|
			(BoolConst) BOOL_CONST:boolValue
;

VarDecl ::= (VarDeclaration) Type:varType IDENT:varName Arr VarDeclList
;

Arr ::= (Array) L_SQUARE_BRACKET R_SQUARE_BRACKET
		|
		(NoArray) /* epsilon */
;

VarDeclList ::= (VarDeclarationList) VarDeclList VarDeclListEnd
				|
				(NoVarDeclarationList) /* epsilon */
;

VarDeclListEnd ::= (VarDeclarationListEnd) COMMA IDENT:varDeclListEndName Arr SEMI
;

ClassDecl ::= (ClassDeclaration) CLASS IDENT:className ExtendsClass L_BRACE ListOfVarDecl Methods R_BRACE
;

ExtendsClass := (ClassExtends) EXTENDS Type:extendsType
				|
				(NoClassExtends) /* epsilon */
				;


ListOfVarDecl ::= (ListVarDeclaration) ListOfVarDecl VarDecl
				|
				(NoListOfVarDeclaration) /* epsilon */
				;

Methods ::= (Methods) L_BRACE MethodDeclList R_BRACE 
			|
			(NoMethods) /* epsilon */
			;

MethodDeclList ::= (MethodsDeclarationList) MethodDeclList MethodDecl
					|
					(NoMethodsDeclarationList) /* epsilon */
					;

MethodDecl ::= (MethodDeclaration) MethodType IDENT:methodName L_PAREN FormParsExists R_PAREN ListOfVarDecl L_BRACE ListOfStmt R_BRACE
; 

MethodType ::= (MethodWithType) Type:methodType
			|
			(MethodVoid) VOID;
			
FormParsExists ::= (FormParsExists) FormPars
				|
				(NoFormParsExists) /* epsilon */
				;

ListOfStmt ::= (ListOfSatemant) ListOfStmt Statement
			|
			(NoListOfSatemant) /* epsilon */
			;
			
FormPars ::= (FormParams) Type:formParsType IDENT:formParsName Arr FormParsList
;

FormParsList ::= (FormParamsList) FormParsList FormParsListEnd
			|	
			(NoFormParsList) /* epsilon */
			;			
			
FormParsListEnd ::= (FormParamsListEnd)	COMMA Type:formParsListEndType IDENT:formParsListEndName Arr
;	
			
Type ::= (Type) IDENT:typeName
;

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

