

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, L_BRACE, R_BRACE, CONST, EQUAL, SEMI, COMMA, CLASS, EXTENDS, VOID;
terminal R_PAREN, L_PAREN, L_SQUARE_BRACKET, R_SQUARE_BRACKET, INCREMENT, DECREMENT;
terminal EQUALS_TO, NOT_EQUAL, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, PLUS, MINUS, MULTIPLY, DIVIDE, MOD;
terminal LOGICAL_OR, LOGICAL_AND, NEW, DOT, CONTINUE, BREAK, DO, WHILE, RETURN, READ, PRINT, IF, ELSE;

terminal Integer NUM_CONST;
terminal String IDENT;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;

terminal COLON, SWITCH, QUESTIONMARK, ENUM, CASE;

nonterminal DeclsList DeclsList;
nonterminal MethodDeclList MethodDeclList;
nonterminal Decls Decls;
nonterminal ConstDecl ConstDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstList ConstList;
nonterminal ConstListEnd ConstListEnd;
nonterminal Arr Arr;
nonterminal VarDeclList VarDeclList;
nonterminal ExtendsClass ExtendsClass;
nonterminal ListOfVarDecl ListOfVarDecl;
nonterminal ListOfStmt ListOfStmt;
nonterminal Statement Statement;
nonterminal MethodDecl MethodDecl;
nonterminal FormParsList FormParsList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ExprList ExprList;
nonterminal ExprListEnd ExprListEnd;
nonterminal ActPars ActPars;
nonterminal ActParsExists ActParsExists;
nonterminal StmtList StmtList;
nonterminal ExprExists ExprExists;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal IfStart IfStart;
nonterminal IfBody IfBody;
nonterminal ElseBody ElseBody;
nonterminal ElseStart ElseStart;
nonterminal IfCond IfCond;
nonterminal LogOr LogOr;

nonterminal  rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Designator,  VarDeclListEnd, VarDecl, MethodType, FormPars, FormParsListEnd;
nonterminal  rs.etf.pp1.symboltable.concepts.Struct Type, Consts, Expr, Factor, Term, CondFact, CondTerm, Condition, ExprArrExists, MulopFactorList, AddopTermList, RelopExprExists;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclsList:D1 L_BRACE MethodDeclList:M2 R_BRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :}
;

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :}
;

DeclsList ::= (DeclarationsList) DeclsList:D1 Decls:D2 {: RESULT=new DeclarationsList(D1, D2); RESULT.setLine(D1left); :}
			|			
			(NoDeclarationsList) {: RESULT=new NoDeclarationsList(); :} /* epsilon */
;

Decls ::= (DeclsConst) ConstDecl:C1 {: RESULT=new DeclsConst(C1); RESULT.setLine(C1left); :} 
		|
		(DeclsVar) VarDecl:V1 {: RESULT=new DeclsVar(V1); RESULT.setLine(V1left); :}
		|
		(DeclsClass) ClassDecl:C1 {: RESULT=new DeclsClass(C1); RESULT.setLine(C1left); :}
;
		

ConstDecl ::= (ConstDeclaration) CONST Type:constType IDENT:constName EQUAL Consts:val ConstList:C1 SEMI {: RESULT=new ConstDeclaration(constType, constName, val, C1); RESULT.setLine(constTypeleft); :}
;

ConstList ::= (ConstantsList) ConstList:C1 ConstListEnd:C2 {: RESULT=new ConstantsList(C1, C2); RESULT.setLine(C1left); :}
			|
			(NoConstantsList) {: RESULT=new NoConstantsList(); :} /* epsilon */			
;

ConstListEnd ::= (ConstantsListEnd) COMMA IDENT:constEndName EQUAL Consts:val {: RESULT=new ConstantsListEnd(constEndName, val); RESULT.setLine(constEndNameleft); :}	
;

Consts ::= (NumConst) NUM_CONST:numValue {: RESULT=new NumConst(numValue); RESULT.setLine(numValueleft); :}
			|
			(CharConst) CHAR_CONST:charValue {: RESULT=new CharConst(charValue); RESULT.setLine(charValueleft); :}
			|
			(BoolConst) BOOL_CONST:boolValue {: RESULT=new BoolConst(boolValue); RESULT.setLine(boolValueleft); :}
;

VarDecl ::= (VarDeclaration) Type:varType IDENT:varName Arr:a VarDeclList:V1 SEMI {: RESULT=new VarDeclaration(varType, varName, a, V1); RESULT.setLine(varTypeleft); :}
			|
			(VarDeclError) error SEMI:l
				{: parser.report_error("(Greska u definisanju promenljive) [VarDecl] Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new VarDeclError(); :}			
;

Arr ::= (Array) L_SQUARE_BRACKET R_SQUARE_BRACKET {: RESULT=new Array(); :}
		|
		(NoArray) {: RESULT=new NoArray(); :} /* epsilon */
;

VarDeclList ::= (VarDeclarationList) VarDeclList:V1 VarDeclListEnd:V2 {: RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); :}     
				|
				(NoVarDeclarationList) {: RESULT=new NoVarDeclarationList(); :} /* epsilon */
				
;

VarDeclListEnd ::= (VarDeclarationListEnd) COMMA IDENT:varDeclListEndName Arr:A1 {: RESULT=new VarDeclarationListEnd(varDeclListEndName, A1); RESULT.setLine(varDeclListEndNameleft); :} 
				|
			(VarDeclListEndError) error COMMA:l
				{: parser.report_error("(Greska u definisanju promenljive) [VarDeclListEnd] Izvrsen oporavak do , u liniji " + lleft, null); :} {: RESULT=new VarDeclListEndError(); :}
;

ClassDecl ::= (ClassDeclarationMethods) CLASS IDENT:className ExtendsClass:E1 L_BRACE ListOfVarDecl:L2 L_BRACE MethodDeclList:M3 R_BRACE R_BRACE {: RESULT=new ClassDeclarationMethods(className, E1, L2, M3); RESULT.setLine(classNameleft); :}
				|
				(ClassDeclaration) CLASS IDENT:className ExtendsClass:E1 L_BRACE ListOfVarDecl:L2  R_BRACE {: RESULT=new ClassDeclaration(className, E1, L2); RESULT.setLine(classNameleft); :}
;

ExtendsClass ::= (ClassExtends) EXTENDS Type:extendsType {: RESULT=new ClassExtends(extendsType); RESULT.setLine(extendsTypeleft); :}
				|
				(NoClassExtends) {: RESULT=new NoClassExtends(); :} /* epsilon */
;


ListOfVarDecl ::= (ListVarDeclaration) ListOfVarDecl:L1 VarDecl:V2 {: RESULT=new ListVarDeclaration(L1, V2); RESULT.setLine(L1left); :}
				|
				(NoListOfVarDeclaration) {: RESULT=new NoListOfVarDeclaration(); :} /* epsilon */
;


MethodDeclList ::= (MethodsDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodsDeclarationList(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodsDeclarationList) {: RESULT=new NoMethodsDeclarationList(); :} /* epsilon */
;

MethodDecl ::= (MethodDeclarationFormPars) MethodType:M1  L_PAREN FormPars:F2 R_PAREN ListOfVarDecl:L3 L_BRACE ListOfStmt:L4 R_BRACE {: RESULT=new MethodDeclarationFormPars(M1, F2, L3, L4); RESULT.setLine(M1left); :}
			|
			(MethodDeclaration) MethodType:M1  L_PAREN R_PAREN ListOfVarDecl:L2 L_BRACE ListOfStmt:L3 R_BRACE {: RESULT=new MethodDeclaration(M1, L2, L3); RESULT.setLine(M1left); :}
; 

MethodType ::= (MethodWithType) Type:methodType IDENT:methodName {: RESULT=new MethodWithType(methodType, methodName); RESULT.setLine(methodTypeleft); :}
			|
			(MethodVoid) VOID IDENT:methodName {: RESULT=new MethodVoid(methodName); RESULT.setLine(methodNameleft); :}
;
			

ListOfStmt ::= (ListOfSatemant) ListOfStmt:L1 Statement:S2 {: RESULT=new ListOfSatemant(L1, S2); RESULT.setLine(L1left); :}
			|
			(NoListOfSatemant) {: RESULT=new NoListOfSatemant(); :} /* epsilon */
;
			
FormPars ::= (FormParams) Type:formParsType IDENT:formParsName Arr:A1 FormParsList:F2 {: RESULT=new FormParams(formParsType, formParsName, A1, F2); RESULT.setLine(formParsTypeleft); :}
			|
			(FormParsError) error COMMA:l
			{: parser.report_error("(Greska u deklaraciji form.par.funkcije) [FormPars] Izvrsen oporavak do ) u liniji " + lleft, null); :} {: RESULT=new FormParsError(); :}
;

FormParsList ::= (FormParamsList) FormParsList:F1 FormParsListEnd:F2 {: RESULT=new FormParamsList(F1, F2); RESULT.setLine(F1left); :}
			|	
			(NoFormParsList) {: RESULT=new NoFormParsList(); :} /* epsilon */
;			
			
FormParsListEnd ::= (FormParamsListEnd)	COMMA Type:fpListType IDENT:fpListName Arr:A1 {: RESULT=new FormParamsListEnd(fpListType, fpListName, A1); RESULT.setLine(fpListTypeleft); :}
					|
				(FormParsListEndError) error COMMA:l
				{: parser.report_error("(Greska u deklaraciji form.par.funkcije) [FormParsListEnd] Izvrsen oporavak do , u liniji " + lleft, null); :} {: RESULT=new FormParsListEndError(); :}
;	
			
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :}
;



Statement ::= (StmtDesgStmt) DesignatorStatement:D1 SEMI {: RESULT=new StmtDesgStmt(D1); RESULT.setLine(D1left); :}
			|	
			(StmtRead) READ L_PAREN Designator:D1 R_PAREN SEMI {: RESULT=new StmtRead(D1); RESULT.setLine(D1left); :}
			|
			(StmtPrintNumConst) PRINT L_PAREN Expr:E1 COMMA NUM_CONST:numVal R_PAREN SEMI {: RESULT=new StmtPrintNumConst(E1, numVal); RESULT.setLine(E1left); :}
			|
			(StmtPrint) PRINT L_PAREN Expr:E1 R_PAREN SEMI {: RESULT=new StmtPrint(E1); RESULT.setLine(E1left); :}
			|
			(StmtDoWhile) DO Statement:S1 WHILE L_PAREN Condition:C2 R_PAREN SEMI {: RESULT=new StmtDoWhile(S1, C2); RESULT.setLine(S1left); :}
			|
			(StmtBreak) BREAK SEMI {: RESULT=new StmtBreak(); :}
			|
			(StmtCont) CONTINUE SEMI {: RESULT=new StmtCont(); :}
			|
			(StmtRet) RETURN ExprExists:E1 SEMI {: RESULT=new StmtRet(E1); RESULT.setLine(E1left); :}
			|
			(StmtStmt) L_BRACE StmtList:S1 R_BRACE {: RESULT=new StmtStmt(S1); RESULT.setLine(S1left); :} 
			|
			(StmtIfElse) IfStart:I1 IfBody:I2 ElseBody:E3 {: RESULT=new StmtIfElse(I1, I2, E3); RESULT.setLine(I1left); :}
			|
			(StmtIf) IfStart:I1 IfBody:I2 {: RESULT=new StmtIf(I1, I2); RESULT.setLine(I1left); :}
;
		
IfStart ::= (IfStart) IF {: RESULT=new IfStart(); :}
;	

IfBody ::= (IfBody) IfCond:I1 Statement:S2 {: RESULT=new IfBody(I1, S2); RESULT.setLine(I1left); :}
;

IfCond ::= (IfCond) L_PAREN Condition:C1 R_PAREN {: RESULT=new IfCond(C1); RESULT.setLine(C1left); :}
;

ElseBody ::= (ElseBody) ElseStart:E1 Statement:S2 {: RESULT=new ElseBody(E1, S2); RESULT.setLine(E1left); :}
;

ElseStart ::= (ElseStart) ELSE {: RESULT=new ElseStart(); :}
;
				
ExprExists ::= (ExpreExists) Expr:E1 {: RESULT=new ExpreExists(E1); RESULT.setLine(E1left); :}
				|
				(NoExprExists) {: RESULT=new NoExprExists(); :} /* epsilon */
;		
				
StmtList ::= (StatementList) StmtList:S1 Statement:S2 {: RESULT=new StatementList(S1, S2); RESULT.setLine(S1left); :}
			|
			(NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
;
			
DesignatorStatement ::=	(DesgnStmtAsgnOp) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesgnStmtAsgnOp(D1, A2, E3); RESULT.setLine(D1left); :}
						|
						(DesgnStmtActPars) Designator:D1 L_PAREN ActPars:A2 R_PAREN {: RESULT=new DesgnStmtActPars(D1, A2); RESULT.setLine(D1left); :}
						|
						(DesgnStmtNoActPars) Designator:D1 L_PAREN R_PAREN {: RESULT=new DesgnStmtNoActPars(D1); RESULT.setLine(D1left); :}
						|
						(DesgnStmtIncr) Designator:D1 INCREMENT {: RESULT=new DesgnStmtIncr(D1); RESULT.setLine(D1left); :}
						|
						(DesgnStmtDecr) Designator:D1 DECREMENT {: RESULT=new DesgnStmtDecr(D1); RESULT.setLine(D1left); :}
						|
					(DesgStmtEndtError) error SEMI:l
						{: parser.report_error("(Greska u iskazu dodele) [DesgStmt] Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new DesgStmtEndtError(); :}
;

			
ActPars ::= (ActParams) Expr:E1 ExprList:E2 {: RESULT=new ActParams(E1, E2); RESULT.setLine(E1left); :}
;

ActParsExists ::= (ActParamsExists) L_PAREN ActPars:A1 R_PAREN {: RESULT=new ActParamsExists(A1); RESULT.setLine(A1left); :}
					|
					(NoActParamsExists) {: RESULT=new NoActParamsExists(); :} /* epsilon */
;

ExprList ::= (ExpListComma) ExprList:E1 ExprListEnd:E2 {: RESULT=new ExpListComma(E1, E2); RESULT.setLine(E1left); :}
			|			
			(NoExpListComma) {: RESULT=new NoExpListComma(); :} /* epsilon */
;

ExprListEnd ::= (ExpListEnd) COMMA Expr:E1 {: RESULT=new ExpListEnd(E1); RESULT.setLine(E1left); :}
;

	

Condition ::= (CondOr) Condition:C1 LogOr:L2 CondTerm:C3 {: RESULT=new CondOr(C1, L2, C3); RESULT.setLine(C1left); :}
				|
				(Cond) CondTerm:C1 {: RESULT=new Cond(C1); RESULT.setLine(C1left); :}
;	

LogOr ::= (LogOr) LOGICAL_OR {: RESULT=new LogOr(); :}
;
			
CondTerm ::= (ConditionTermAnd) CondTerm:C1 LOGICAL_AND CondFact:C2 {: RESULT=new ConditionTermAnd(C1, C2); RESULT.setLine(C1left); :}
			|	
			(ConditionTerm) CondFact:C1 {: RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); :}
;


CondFact ::= (ConditionFact) Expr:E1 RelopExprExists:R2 {: RESULT=new ConditionFact(E1, R2); RESULT.setLine(E1left); :}
;

RelopExprExists ::= (RelopExprExist) Relop:R1 Expr:E2 {: RESULT=new RelopExprExist(R1, E2); RESULT.setLine(R1left); :}
				|
				(NoRelopExprExist) {: RESULT=new NoRelopExprExist(); :} /* epsilon */
;
	
Expr ::= (Expression) Term:T1 AddopTermList:A2 {: RESULT=new Expression(T1, A2); RESULT.setLine(T1left); :}
		|
		(ExpressionMinus) MINUS Term:T1 AddopTermList:A2 {: RESULT=new ExpressionMinus(T1, A2); RESULT.setLine(T1left); :}
		|
		(ExprError) error SEMI:l
		{: parser.report_error("(Greska u iskazu dodele) [Expr] Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new ExprError(); :}
;
	
				
AddopTermList ::= (ListAddopTerm) AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new ListAddopTerm(A1, A2, T3); RESULT.setLine(A1left); :}
				|
				(NoListAddopTerm) {: RESULT=new NoListAddopTerm(); :} /* epsilon */
;
				
Term ::= (Term) Factor:F1 MulopFactorList:M2 {: RESULT=new Term(F1, M2); RESULT.setLine(F1left); :}
;

MulopFactorList ::= (MullopFactList) MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MullopFactList(M1, M2, F3); RESULT.setLine(M1left); :}
				|
				(NoMullopFactList) {: RESULT=new NoMullopFactList(); :} /* epsilon */
;
				
Factor ::= (FactorDesign) Designator:D1 ActParsExists:A2 {: RESULT=new FactorDesign(D1, A2); RESULT.setLine(D1left); :}
		|
		(FactorNumConst) NUM_CONST:numVal {: RESULT=new FactorNumConst(numVal); RESULT.setLine(numValleft); :}
		|
		(FactorCharConst) CHAR_CONST:numVal {: RESULT=new FactorCharConst(numVal); RESULT.setLine(numValleft); :}
		|
		(FactorBoolConst) BOOL_CONST:numVal {: RESULT=new FactorBoolConst(numVal); RESULT.setLine(numValleft); :}
		|
		(FactorNew) NEW Type:T1 {: RESULT=new FactorNew(T1); RESULT.setLine(T1left); :} 
		|
		(FactorNewArr) NEW Type:T1 L_SQUARE_BRACKET Expr:E2 R_SQUARE_BRACKET {: RESULT=new FactorNewArr(T1, E2); RESULT.setLine(T1left); :}
		|
		(FactorExpr) L_PAREN Expr:E1 R_PAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
;



Designator ::= (DesignatorIdent) IDENT:dsgnName {: RESULT=new DesignatorIdent(dsgnName); RESULT.setLine(dsgnNameleft); :}
				|
				(DesignatorArr) IDENT:dsgnName L_SQUARE_BRACKET Expr:i R_SQUARE_BRACKET {: RESULT=new DesignatorArr(dsgnName, i); RESULT.setLine(dsgnNameleft); :}
;

	
Assignop ::= (AssignOperator) EQUAL {: RESULT=new AssignOperator(); :}
;

Relop ::= (RelopE) EQUALS_TO {: RESULT=new RelopE(); :}
		|
		(RelopNE) NOT_EQUAL {: RESULT=new RelopNE(); :}
		|
		(RelopG) GREATER {: RESULT=new RelopG(); :}
		|
		(RelopGE) GREATER_OR_EQUAL {: RESULT=new RelopGE(); :}
		|
		(RelopL) LESS {: RESULT=new RelopL(); :}
		|
		(RelopLE) LESS_OR_EQUAL {: RESULT=new RelopLE(); :}
;		
			
Addop ::= (OpAdd) PLUS {: RESULT=new OpAdd(); :}
		|
		(SubOp) MINUS {: RESULT=new SubOp(); :}
;
		
Mulop ::= (OpMul) MULTIPLY {: RESULT=new OpMul(); :}
		|
		(DivOp) DIVIDE {: RESULT=new DivOp(); :}
		|
		(ModOp) MOD {: RESULT=new ModOp(); :}
;
