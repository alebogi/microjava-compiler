

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, L_BRACE, R_BRACE, CONST, EQUAL, SEMI, COMMA, CLASS, EXTENDS, VOID;
terminal R_PAREN, L_PAREN, L_SQUARE_BRACKET, R_SQUARE_BRACKET, INCREMENT, DECREMENT;
terminal EQUALS_TO, NOT_EQUAL, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, PLUS, MINUS, MULTIPLY, DIVIDE, MOD;
terminal LOGICAL_OR, LOGICAL_AND, NEW, DOT, CONTINUE, BREAK, DO, WHILE, RETURN, READ, PRINT, IF, ELSE;

terminal Integer NUM_CONST;
terminal String IDENT;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;

terminal COLON, SWITCH, QUESTIONMARK, ENUM, CASE;

nonterminal DeclsList, MethodDeclList, Decls, ConstDecl, ClassDecl, ConstList, ConstListEnd, Arr, VarDeclList;
nonterminal ExtendsClass, ListOfVarDecl, ListOfStmt, Statement, MethodDecl;
nonterminal FormParsList, DesignatorStatement, Condition, ExprList, ExprListEnd;
nonterminal CondTerm, CondTermOrList, CondFact, CondFactAndList, RelopExprExists, ActPars, ActParsExists, DesgStmtEnd, StmtList, ExprExists;
nonterminal Assignop, Relop, Addop, Mulop, AddopTermList, MinusExists, Term, ExprArrExists, MulopFactorList, DesgnListEnd, DesgnList;
nonterminal StmtMatched, StmtUnmatched;

nonterminal  rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Designator,  VarDeclListEnd, VarDecl, MethodType, FormPars, FormParsListEnd;
nonterminal  rs.etf.pp1.symboltable.concepts.Struct Type, Consts, Expr, Factor;

Program ::= (Program) PROG ProgName:p DeclsList L_BRACE MethodDeclList R_BRACE
;

ProgName ::= (ProgName) IDENT:progName
;

DeclsList ::= (DeclarationsList) DeclsList Decls
			|			
			(NoDeclarationsList) /* epsilon */
;

Decls ::= (DeclsConst) ConstDecl 
		|
		(DeclsVar) VarDecl
		|
		(DeclsClass) ClassDecl
;
		

ConstDecl ::= (ConstDeclaration) CONST Type:constType IDENT:constName EQUAL Consts:val ConstList SEMI
;

ConstList ::= (ConstantsList) ConstList ConstListEnd
			|
			(NoConstantsList) /* epsilon */			
;

ConstListEnd ::= (ConstantsListEnd) COMMA IDENT:constEndName EQUAL Consts:val	
;

Consts ::= (NumConst) NUM_CONST:numValue
			|
			(CharConst) CHAR_CONST:charValue
			|
			(BoolConst) BOOL_CONST:boolValue
;

VarDecl ::= (VarDeclaration) Type:varType IDENT:varName Arr:a VarDeclList SEMI
			|
			(VarDeclError) error SEMI:l
				{: parser.report_error("(Greska u definisanju promenljive) [VarDecl] Izvrsen oporavak do ; u liniji " + lleft, null); :}			
;

Arr ::= (Array) L_SQUARE_BRACKET R_SQUARE_BRACKET
		|
		(NoArray) /* epsilon */
;

VarDeclList ::= (VarDeclarationList) VarDeclList VarDeclListEnd     
				|
				(NoVarDeclarationList) /* epsilon */
				
;

VarDeclListEnd ::= (VarDeclarationListEnd) COMMA IDENT:varDeclListEndName Arr 
				|
			(VarDeclListEndError) error COMMA:l
				{: parser.report_error("(Greska u definisanju promenljive) [VarDeclListEnd] Izvrsen oporavak do , u liniji " + lleft, null); :}
;

ClassDecl ::= (ClassDeclarationMethods) CLASS IDENT:className ExtendsClass L_BRACE ListOfVarDecl L_BRACE MethodDeclList R_BRACE R_BRACE
				|
				(ClassDeclaration) CLASS IDENT:className ExtendsClass L_BRACE ListOfVarDecl  R_BRACE
;

ExtendsClass ::= (ClassExtends) EXTENDS Type:extendsType
				|
				(NoClassExtends) /* epsilon */
;


ListOfVarDecl ::= (ListVarDeclaration) ListOfVarDecl VarDecl
				|
				(NoListOfVarDeclaration) /* epsilon */
;


MethodDeclList ::= (MethodsDeclarationList) MethodDeclList MethodDecl
					|
					(NoMethodsDeclarationList) /* epsilon */
;

MethodDecl ::= (MethodDeclarationFormPars) MethodType  L_PAREN FormPars R_PAREN ListOfVarDecl L_BRACE ListOfStmt R_BRACE
			|
			(MethodDeclaration) MethodType  L_PAREN R_PAREN ListOfVarDecl L_BRACE ListOfStmt R_BRACE
; 

MethodType ::= (MethodWithType) Type:methodType IDENT:methodName
			|
			(MethodVoid) VOID IDENT:methodName
;
			

ListOfStmt ::= (ListOfSatemant) ListOfStmt Statement
			|
			(NoListOfSatemant) /* epsilon */
;
			
FormPars ::= (FormParams) Type:formParsType IDENT:formParsName Arr FormParsList
			|
			(FormParsError) error COMMA:l
			{: parser.report_error("(Greska u deklaraciji form.par.funkcije) [FormPars] Izvrsen oporavak do ) u liniji " + lleft, null); :}
;

FormParsList ::= (FormParamsList) FormParsList FormParsListEnd
			|	
			(NoFormParsList) /* epsilon */
;			
			
FormParsListEnd ::= (FormParamsListEnd)	COMMA Type:fpListType IDENT:fpListName Arr
					|
				(FormParsListEndError) error COMMA:l
				{: parser.report_error("(Greska u deklaraciji form.par.funkcije) [FormParsListEnd] Izvrsen oporavak do , u liniji " + lleft, null); :}
;	
			
Type ::= (Type) IDENT:typeName
;

Statement ::= (MatchedStmt) StmtMatched
			|
			(UnmatchedStmt) StmtUnmatched
;

StmtMatched ::= (StmtDesgStmt) DesignatorStatement SEMI
			|	
			(StmtRead) READ L_PAREN Designator R_PAREN SEMI
			|
			(StmtPrintNumConst) PRINT L_PAREN Expr COMMA NUM_CONST:numVal R_PAREN SEMI
			|
			(StmtPrint) PRINT L_PAREN Expr R_PAREN SEMI
			|
			(StmtDoWhile) DO Statement WHILE L_PAREN Condition R_PAREN SEMI
			|
			(StmtBreak) BREAK SEMI
			|
			(StmtCont) CONTINUE SEMI
			|
			(StmtRet) RETURN ExprExists SEMI
			|
			(StmtStmt) L_BRACE StmtList R_BRACE 
			|
			(StmtIfElse) IF L_PAREN Condition R_PAREN StmtMatched ELSE StmtMatched
;
		
StmtUnmatched ::= (StmtUnmatchedIf) IF L_PAREN Condition R_PAREN Statement
				|
				(StmtUnmatchedIfElse) IF  L_PAREN Condition R_PAREN StmtMatched ELSE StmtUnmatched
;
	
				
ExprExists ::= (ExpreExists) Expr
				|
				(NoExprExists) /* epsilon */
;		
				
StmtList ::= (StatementList) StmtList Statement
			|
			(NoStatementList) /* epsilon */
;
			
DesignatorStatement ::=	(DesignStmt) Designator DesgStmtEnd
;

DesgStmtEnd ::= (DesgnStmtAsgnOp) Assignop Expr
				|
				(DesgnStmtActPars)  ActParsExists 	
				|
				(DesgnStmtIncr) INCREMENT
				|
				(DesgnStmtDecr) DECREMENT
				|
			(DesgStmtEndtError) error SEMI:l
				{: parser.report_error("(Greska u iskazu dodele) [DesgStmtEnd] Izvrsen oporavak do ; u liniji " + lleft, null); :}
;
				
ActParsExists ::= (ActParamsExists) L_PAREN ActPars R_PAREN
					|
					(NoActParamsExists) /* epsilon */
;
			
			
ActPars ::= (ActParams) Expr ExprList
;

ExprList ::= (ExpListComma) ExprList ExprListEnd
			|			
			(NoExpListComma) /* epsilon */
;

ExprListEnd ::= (ExpListEnd) COMMA Expr
;

Condition ::= (Cond) CondTerm CondTermOrList
;			
			
CondTermOrList ::= (CondTermListOr) CondTermOrList LOGICAL_OR CondTerm	
				|
				(NoCondTermLisOr) /* epsilon */			
;

CondTerm ::= (ConditionTerm) CondFact CondFactAndList
				|
				(CondTermError) error R_PAREN:l
				{: parser.report_error("(Greska u logickom izrazu unutar if) [CondTerm] Izvrsen oporavak do ) u liniji " + lleft, null); :}
;

CondFactAndList ::= (CondFactListAnd) CondFactAndList LOGICAL_AND CondFact
					|
					(NoCondFactListAnd) /* epsilon */
;

CondFact ::= (ConditionFact) Expr RelopExprExists
;

RelopExprExists ::= (RelopExprExist) Relop Expr
				|
				(NoRelopExprExist) /* epsilon */
;
	
Expr ::= (Expression) MinusExists Term AddopTermList
		|
		(ExprError) error SEMI:l
		{: parser.report_error("(Greska u iskazu dodele) [Expr] Izvrsen oporavak do ; u liniji " + lleft, null); :}
;

MinusExists ::= (MinusExs) MINUS
				|
				(NoMinusExs) /* epsilon */
;	
				
AddopTermList ::= (ListAddopTerm) AddopTermList Addop Term
				|
				(NoListAddopTerm) /* epsilon */
;
				
Term ::= (Term) Factor MulopFactorList
;

MulopFactorList ::= (MullopFactList) MulopFactorList Mulop Factor
				|
				(NoMullopFactList) /* epsilon */
;
				
Factor ::= (FactorDesign) Designator ActParsExists
		|
		(FactorNumConst) NUM_CONST:numVal
		|
		(FactorCharConst) CHAR_CONST:numVal
		|
		(FactorBoolConst) BOOL_CONST:numVal
		|
		(FactorNew) NEW Type ExprArrExists
		|
		(FactorExpr) L_PAREN Expr R_PAREN
;

ExprArrExists ::= (ArrExprExists) L_SQUARE_BRACKET Expr R_SQUARE_BRACKET
				|
				(NoArrExprExists) /* epsilon */
;

Designator ::= (Designator) IDENT:dsgnName DesgnList
;

DesgnList ::= (DesignList) DesgnList DesgnListEnd
			|
			(NoDesignList) /* epsilon */
;
			
DesgnListEnd ::= (DesignListEnd) DOT IDENT:DesgnNameId
				|
				(DesgnListEndExpr) L_SQUARE_BRACKET Expr R_SQUARE_BRACKET
;	
	
Assignop ::= (AssignOperator) EQUAL
;

Relop ::= (RelopE) EQUALS_TO
		|
		(RelopNE) NOT_EQUAL
		|
		(RelopG) GREATER
		|
		(RelopGE) GREATER_OR_EQUAL
		|
		(RelopL) LESS
		|
		(RelopLE) LESS_OR_EQUAL
;		
			
Addop ::= (OpAdd) PLUS
		|
		(SubOp) MINUS
;
		
Mulop ::= (OpMul) MULTIPLY
		|
		(DivOp) DIVIDE
		|
		(ModOp) MOD
;
